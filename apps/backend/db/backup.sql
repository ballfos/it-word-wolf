-- PRAGMA foreign_keys=OFF;
-- BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "categories" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "name" TEXT NOT NULL UNIQUE
);
INSERT INTO categories VALUES(1,'プログラミング言語');
INSERT INTO categories VALUES(2,'データ構造とアルゴリズム');
INSERT INTO categories VALUES(3,'ネットワーク');
INSERT INTO categories VALUES(4,'データベース');
INSERT INTO categories VALUES(5,'セキュリティ');
INSERT INTO categories VALUES(6,'ソフトウェア工学');
INSERT INTO categories VALUES(7,'ヒューマンインターフェース');
INSERT INTO categories VALUES(8,'組み込みシステム');
INSERT INTO categories VALUES(9,'データサイエンス');
INSERT INTO categories VALUES(10,'コンピュータシステム');
CREATE TABLE IF NOT EXISTS "difficulties" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "level" INTEGER UNIQUE NOT NULL,
    "name" TEXT NOT NULL UNIQUE
);
INSERT INTO difficulties VALUES(1,1,'入門');
INSERT INTO difficulties VALUES(2,2,'初級');
INSERT INTO difficulties VALUES(3,3,'中級');
INSERT INTO difficulties VALUES(4,4,'上級');
INSERT INTO difficulties VALUES(5,5,'超上級');
CREATE TABLE IF NOT EXISTS "history" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "category_id" INTEGER NOT NULL,
    "difficulty_id" INTEGER NOT NULL,
    "sub_category" TEXT NOT NULL,
    "words" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO history VALUES(1,1,1,'プログラミング基礎','[{"english":"Variable","explanation":"プログラム中でデータを一時的に保存するための入れ物。","word":"変数"},{"english":"Function","explanation":"特定の処理をひとまとめにしたもの。繰り返し利用できる。","word":"関数"},{"english":"Loop","explanation":"ある条件が満たされるまで、同じ処理を何度も繰り返す制御構造。","word":"ループ"},{"english":"Conditional Branch","explanation":"特定の条件に応じて、処理の流れを変える制御構造。if文などが該当する。","word":"条件分岐"}]','2025-08-03 08:50:58');
INSERT INTO history VALUES(2,1,2,'プログラミング基礎','[{"english":"Variable","explanation":"データを格納するための名前付きの入れ物。数字や文字などを代入できます。","word":"変数"},{"english":"Function","explanation":"特定の処理をひとまとまりにしたもの。同じ処理を繰り返し使いたいときに便利です。","word":"関数"},{"english":"Conditional Statement","explanation":"特定の条件が正しい場合にのみ処理を実行する構造。主に`if`文などを使います。","word":"条件分岐"},{"english":"Loop","explanation":"特定の処理を複数回繰り返して実行する構造。`for`文や`while`文などがあります。","word":"繰り返し"}]','2025-08-03 08:51:02');
INSERT INTO history VALUES(3,1,3,'データ構造','[{"english":"Stack","explanation":"データが積み重なったような構造で、最後に入れたものが最初に取り出される（LIFO: Last In, First Out）特性を持ちます。","word":"スタック"},{"english":"Queue","explanation":"データが列のように並び、最初に入れたものが最初に取り出される（FIFO: First In, First Out）特性を持ちます。","word":"キュー"},{"english":"Linked List","explanation":"複数のデータ要素が線形に連結されており、各要素が次の要素への参照（ポインタ）を持っています。","word":"連結リスト"},{"english":"Hash Table","explanation":"キーと値のペアを格納するデータ構造で、キーから値へのマッピングを高速に行うことができます。","word":"ハッシュテーブル"}]','2025-08-03 08:51:05');
INSERT INTO history VALUES(4,1,4,'Web開発フレームワーク','[{"english":"Single Page Application","explanation":"Webページが初期ロード後に動的にコンテンツを書き換えることで、まるでデスクトップアプリケーションのように動作するアプリケーションモデル。ReactやAngular、Vue.jsなどのフレームワークがよく利用される。","word":"シングルページアプリケーション"},{"english":"Serverless Architecture","explanation":"サーバーの管理をプロバイダに任せ、必要な時だけコードを実行するモデル。AWS LambdaやAzure Functionsなどが代表的で、インフラの運用負荷を軽減する。","word":"サーバーレスアーキテクチャ"},{"english":"Container Orchestration","explanation":"Dockerなどのコンテナを大量にデプロイし、管理、スケーリング、ネットワーキングを自動化する技術。Kubernetesが最も有名であり、マイクロサービス開発で不可欠な役割を果たす。","word":"コンテナオーケストレーション"},{"english":"Reactive Programming","explanation":"非同期データストリームの処理を容易にするためのプログラミングパラダイム。RxJSなどが代表的で、イベント駆動型のUIや非同期処理が多いWebアプリケーションで活用される。","word":"リアクティブプログラミング"}]','2025-08-03 08:51:10');
INSERT INTO history VALUES(5,1,5,'データ構造とアルゴリズム','[{"english":"Red-Black Tree","explanation":"各ノードに赤か黒のどちらかの色を保持し、木のバランスを保つための5つの厳密なルールを持つ自己平衡二分探索木。","word":"赤黒木"},{"english":"Dynamic Programming","explanation":"複雑な問題をより単純な部分問題に分解し、それらの部分問題の解を記録・再利用することで、重複する計算を避けて効率的に全体の問題を解くアルゴリズムの設計手法。","word":"動的計画法"},{"english":"Heap Sort","explanation":"ヒープと呼ばれる木構造のデータ構造を利用して、データを効率的にソートする比較ソートアルゴリズム。最大（または最小）要素が常に根にあるヒープの特性を利用してソートを行う。","word":"ヒープソート"},{"english":"A* Search Algorithm","explanation":"グラフ上での最短経路探索に使われる、発見的探索アルゴリズムの一つ。ヒューリスティック関数を用いて目的地までの概算コストを考慮し、最も効率的な経路を見つける。","word":"A*探索アルゴリズム"}]','2025-08-03 08:51:16');
INSERT INTO history VALUES(6,2,1,'ソートアルゴリズム','[{"english":"Bubble Sort","explanation":"隣り合う要素を比較し、順序が逆であれば入れ替える操作を繰り返す、シンプルで安定なソートアルゴリズムです。","word":"バブルソート"},{"english":"Selection Sort","explanation":"配列の中から最小（または最大）の要素を見つけ、未ソート部分の先頭要素と交換していくことで整列を行うアルゴリズムです。","word":"選択ソート"},{"english":"Insertion Sort","explanation":"未整列の要素を一つずつ取り出し、すでに整列済みの部分の適切な位置に挿入していくことで整列を行うアルゴリズムです。","word":"挿入ソート"},{"english":"Quick Sort","explanation":"分割統治法に基づき、ピボット要素を基準に配列を分割し、それぞれの部分を再帰的にソートする、高速なアルゴリズムです。","word":"クイックソート"}]','2025-08-03 08:51:50');
INSERT INTO history VALUES(7,2,2,'基本的なデータ構造','[{"english":"Array","explanation":"データが連続したメモリ領域に格納され、インデックスでアクセスできる線形データ構造。","word":"配列"},{"english":"Linked List","explanation":"データが連続していないメモリ領域に格納され、ポインタで次の要素に連結されるデータ構造。","word":"連結リスト"},{"english":"Stack","explanation":"LIFO (Last-In, First-Out) の原則に基づき、最後に追加された要素が最初に取り出されるデータ構造。","word":"スタック"},{"english":"Queue","explanation":"FIFO (First-In, First-Out) の原則に基づき、最初に追加された要素が最初に取り出されるデータ構造。","word":"キュー"}]','2025-08-03 08:51:54');
INSERT INTO history VALUES(8,2,3,'ソートアルゴリズム','[{"english":"Quick Sort","explanation":"分割統治法に基づいた高速なソートアルゴリズムで、ピボット要素を基準に配列を二分割し、それぞれを再帰的にソートします。最悪計算量はO(n^2)ですが、平均計算量はO(n log n)です。","word":"クイックソート"},{"english":"Merge Sort","explanation":"分割統治法に基づいた安定なソートアルゴリズムです。配列を再帰的に半分に分割し、最終的にソートされた部分配列を結合（マージ）することで全体をソートします。計算量はO(n log n)です。","word":"マージソート"},{"english":"Heap Sort","explanation":"二分ヒープ木というデータ構造を利用した比較ソートアルゴリズムです。配列をヒープ構造に変換した後、最大（または最小）要素を繰り返し取り出すことでソートします。計算量はO(n log n)です。","word":"ヒープソート"},{"english":"Computational Complexity","explanation":"アルゴリズムが問題を解決するのに必要な時間やメモリなどの資源の量を示す指標です。O記法（Big O表記）で表されることが多く、アルゴリズムの効率性を評価するために使われます。","word":"計算量"}]','2025-08-03 08:52:00');
INSERT INTO history VALUES(9,2,4,'グラフアルゴリズム','[{"english":"Dijkstra''s Algorithm","explanation":"重みが非負の辺を持つグラフにおいて、単一の始点から他の全ての頂点への最短経路を見つけるアルゴリズムです。","word":"ダイクストラ法"},{"english":"Minimum Spanning Tree","explanation":"連結された重み付き無向グラフにおいて、全ての頂点を結び、かつ閉路を含まず、辺の重みの合計が最小となる部分グラフ（木）のことです。","word":"最小全域木"},{"english":"Bellman-Ford Algorithm","explanation":"重み付き有向グラフにおいて、単一の始点から他の全ての頂点への最短経路を見つけるアルゴリズムです。負の重みを持つ辺や、負の閉路の検出も可能です。","word":"ベルマンフォード法"},{"english":"Max-Flow Min-Cut Theorem","explanation":"フローネットワークにおいて、ソースからシンクへ流れる最大のフロー量が、ソースとシンクを分ける最小カットの容量と等しいことを示す定理です。","word":"最大フロー最小カット定理"}]','2025-08-03 08:52:06');
INSERT INTO history VALUES(10,2,5,'計算複雑性理論','[{"english":"P versus NP problem","explanation":"多項式時間で解ける問題のクラスPと、解の検証が多項式時間で行える問題のクラスNPが等しいかという未解決の問題。","word":"P/NP問題"},{"english":"Turing machine","explanation":"アルゴリズムや計算可能性の概念を形式的に定義するために使われる、仮想的な機械モデル。","word":"チューリングマシン"},{"english":"PSPACE-complete","explanation":"多項式空間で解ける問題のクラスPSPACEの中で、最も難しい問題群。","word":"PSPACE完全"},{"english":"Reducibility","explanation":"ある問題を別の問題に変換することで、問題の計算上の難しさを比較する概念。","word":"還元可能性"}]','2025-08-03 08:52:10');
INSERT INTO history VALUES(11,3,1,'基礎概念','[{"english":"IP Address","explanation":"インターネット上のデバイスを識別するための数値アドレスです。","word":"IPアドレス"},{"english":"Router","explanation":"異なるネットワーク間でのデータ転送を行う機器です。","word":"ルータ"},{"english":"LAN","explanation":"家庭やオフィスなど、比較的狭い範囲で使われるネットワークです。","word":"LAN"},{"english":"Protocol","explanation":"コンピュータ間で通信を行うための取り決めや手順のことです。","word":"プロトコル"}]','2025-08-03 08:52:33');
INSERT INTO history VALUES(12,3,2,'ローカルエリアネットワーク','[{"english":"Router","explanation":"ルーターは、異なるネットワーク間でデータパケットを転送するデバイスです。","word":"ルーター"},{"english":"Switch","explanation":"スイッチは、LAN内でデバイスを接続し、データフレームを転送するデバイスです。","word":"スイッチ"},{"english":"IP Address","explanation":"IPアドレスは、ネットワーク上のデバイスを一意に識別するための数値ラベルです。","word":"IPアドレス"},{"english":"Ethernet","explanation":"イーサネットは、有線LANで広く使われているネットワーク技術規格です。","word":"イーサネット"}]','2025-08-03 08:52:36');
INSERT INTO history VALUES(13,3,3,'TCP/IP','[{"english":"IP Address","explanation":"インターネットに接続されたデバイスを識別するための数値のアドレス。","word":"IPアドレス"},{"english":"Port Number","explanation":"ネットワーク上のアプリケーションやサービスを識別するために使われる番号。","word":"ポート番号"},{"english":"Routing","explanation":"データパケットを送信元から宛先へ正しく転送するプロセス。","word":"ルーティング"},{"english":"Subnet Mask","explanation":"IPアドレスをネットワークアドレス部とホストアドレス部に区別するために使われる数値。","word":"サブネットマスク"}]','2025-08-03 08:52:39');
INSERT INTO history VALUES(14,3,4,'ルーティング','[{"english":"Border Gateway Protocol","explanation":"インターネット上の異なる自律システム（AS）間でルーティング情報を交換するために使用されるパスベクトルルーティングプロトコルです。ISP間の接続に不可欠です。","word":"BGP"},{"english":"Open Shortest Path First","explanation":"大規模なエンタープライズネットワークやサービスプロバイダーのネットワーク内で使用されるリンクステート型ルーティングプロトコルです。ダイクストラ法を用いて最短パスを決定します。","word":"OSPF"},{"english":"Multiprotocol Label Switching","explanation":"ネットワークレイヤーとデータリンクレイヤーの中間に位置する技術で、ラベル（識別子）をパケットに付加することで高速なパケット転送を可能にします。VPNやトラフィックエンジニアリングによく用いられます。","word":"MPLS"},{"english":"Software-Defined Networking","explanation":"ネットワークの制御機能を物理的なハードウェアから分離し、ソフトウェアによって集中的に管理するアプローチです。ネットワークの柔軟性と自動化を向上させます。","word":"SDN"}]','2025-08-03 08:52:44');
INSERT INTO history VALUES(15,3,5,'ネットワークセキュリティ','[{"english":"SASE (Secure Access Service Edge)","explanation":"ネットワークのWAN最適化機能と、ゼロトラストをベースとした包括的なセキュリティ機能をクラウド上で統合提供する新しいセキュリティフレームワーク。","word":"SASE (セキュアアクセスサービスエッジ)"},{"english":"ZTNA (Zero Trust Network Access)","explanation":"ユーザーやデバイスがどこにいても、社内ネットワーク境界の有無にかかわらず、全てのアクセス要求を検証し、都度最小権限を付与するゼロトラストモデルを実現するための技術。","word":"ZTNA (ゼロトラストネットワークアクセス)"},{"english":"NDR (Network Detection and Response)","explanation":"ネットワークトラフィックとフローデータ（NetFlowなど）を継続的に監視・分析し、異常な振る舞いや高度な脅威をAIや機械学習を用いて検知し、対応を支援するセキュリティソリューション。","word":"NDR (ネットワーク検知と対応)"},{"english":"SOAR (Security Orchestration, Automation and Response)","explanation":"セキュリティ運用において、様々なセキュリティツールからのアラートの収集、脅威インテリジェンスとの連携、プレイブックに基づいた自動応答、インシデント管理などを統合し、効率化・自動化するプラットフォーム。","word":"SOAR (セキュリティオーケストレーション・自動化・対応)"}]','2025-08-03 08:52:53');
INSERT INTO history VALUES(16,4,1,'リレーショナルデータベース','[{"english":"Table","explanation":"データを縦横の行と列で整理して格納する構造。","word":"テーブル"},{"english":"Record","explanation":"テーブルの一行分のデータで、一つのエンティティの情報を表す。","word":"レコード"},{"english":"Field","explanation":"テーブルの一列分のデータで、特定の種類の情報を表す。","word":"フィールド"},{"english":"Primary Key","explanation":"テーブル内の各レコードを一意に識別するために使われるフィールド。重複は許されない。","word":"主キー"}]','2025-08-03 08:53:08');
INSERT INTO history VALUES(17,4,2,'リレーショナルデータベース','[{"english":"Table","explanation":"行と列で構成され、関連するデータを整理して格納するための構造です。","word":"テーブル"},{"english":"Record","explanation":"テーブルにおける一つの行のことで、特定のエンティティに関するデータの集合です。","word":"レコード"},{"english":"Field","explanation":"テーブルにおける一つの列のことで、各レコードの特定の種類のデータを保持します。","word":"フィールド"},{"english":"Primary Key","explanation":"テーブル内の各レコードを一意に識別するために使用される、特定の列または列のセットです。","word":"主キー"}]','2025-08-03 08:53:10');
INSERT INTO history VALUES(18,4,3,'SQL','[{"english":"JOIN","explanation":"複数のテーブルを結合し、関連する行を一つにまとめるためのSQL句です。INNER JOINやLEFT JOINなどがあります。","word":"結合"},{"english":"INDEX","explanation":"データベースの検索速度を向上させるために使用される特別なデータ構造です。書籍の索引に似ています。","word":"インデックス"},{"english":"Transaction","explanation":"データベース操作の一連の論理的な作業単位で、すべてが成功するか、すべてが元に戻るかのどちらかであるべきものです。ACID特性によって整合性が保たれます。","word":"トランザクション"},{"english":"View","explanation":"一つ以上のテーブルから派生した仮想のテーブルです。データはビューには格納されず、参照するテーブルから動的に取得されます。","word":"ビュー"}]','2025-08-03 08:53:16');
INSERT INTO history VALUES(19,4,4,'リレーショナルデータベース','[{"english":"Normalization","explanation":"データベースの設計において、データの重複を排除し、一貫性と効率性を高めるためのプロセス。","word":"正規化"},{"english":"ACID Properties","explanation":"データベースのトランザクションが持つべき4つの特性（原子性, 一貫性, 独立性, 耐久性）の頭文字を取ったもので、信頼性を保証する。","word":"ACID特性"},{"english":"Transaction Isolation Levels","explanation":"複数のトランザクションが同時に実行される際に、互いの処理がどの程度影響を与え合うかを定義する設定。デッドロックやダーティリードなどの問題に関わる。","word":"トランザクション分離レベル"},{"english":"Deadlock","explanation":"複数のトランザクションが、互いに相手が保持しているリソースの解放を待ち合っているため、いずれの処理も進行できなくなる状態。","word":"デッドロック"}]','2025-08-03 08:53:22');
INSERT INTO history VALUES(20,4,5,'NoSQLデータベース','[{"english":"CAP Theorem","explanation":"分散データベースシステムにおいて、整合性 (Consistency)、可用性 (Availability)、分断耐性 (Partition tolerance) のうち、同時に満たすことができるのは常に2つまでであるという定理。","word":"CAP定理"},{"english":"Eventual Consistency","explanation":"分散システムにおける整合性モデルの一つで、即座には整合性が保たれなくても、更新が停止すれば最終的にはすべてのノードでデータが一致するという特性。","word":"結果整合性"},{"english":"Sharding","explanation":"巨大なデータセットや負荷を分散させるために、データを複数のノードに水平に分割して保存する技術。","word":"シャーディング"},{"english":"Aggregate","explanation":"ドキュメントデータベースにおいて、アプリケーションからひとつの単位として扱われるデータとその関連するデータ群。通常、単一のノードに保存され、アトミックに操作される。","word":"アグリゲート"}]','2025-08-03 08:53:26');
INSERT INTO history VALUES(21,5,1,'サイバー攻撃の種類','[{"english":"Phishing","explanation":"詐欺の一種で、偽のウェブサイトやメールを使って、ユーザー名、パスワード、クレジットカード情報などの個人情報を盗み取ろうとする手口です。","word":"フィッシング"},{"english":"Malware","explanation":"悪意のあるソフトウェアの総称です。ウイルス、ワーム、トロイの木馬などが含まれ、コンピュータに損害を与えたり、データを盗んだりします。","word":"マルウェア"},{"english":"DDoS Attack","explanation":"複数のコンピュータから標的のサーバーに大量のアクセスを集中させることで、サーバーをダウンさせたり、サービスを利用不能にしたりする攻撃です。","word":"DDoS攻撃"},{"english":"SQL Injection","explanation":"データベースと連携するWebアプリケーションの脆弱性を利用し、悪意のあるSQLコマンドを挿入して、データベース内の情報を不正に取得・操作する攻撃です。","word":"SQLインジェクション"}]','2025-08-03 08:53:51');
INSERT INTO history VALUES(22,5,2,'情報セキュリティ','[{"english":"Authentication","explanation":"本人であることを確認するための手続きです。パスワードや指紋などを使います。","word":"認証"},{"english":"Encryption","explanation":"情報を第三者に読めないように変換することです。セキュリティを高めるために使われます。","word":"暗号化"},{"english":"Firewall","explanation":"外部からの不正なアクセスや攻撃からネットワークを保護するシステムです。防火壁という意味です。","word":"ファイアウォール"},{"english":"Malware","explanation":"コンピュータに害を与える悪意のあるソフトウェアの総称です。ウイルスやスパイウェアなどが含まれます。","word":"マルウェア"}]','2025-08-03 08:53:55');
INSERT INTO history VALUES(23,5,3,'認証','[{"english":"Two-factor authentication","explanation":"IDとパスワードだけでなく、別の手段（例: スマートフォンへのコード送信）を組み合わせて本人確認を行う方式です。","word":"二段階認証"},{"english":"Biometric authentication","explanation":"指紋、顔、虹彩など、生体情報を用いて本人確認を行う方式です。","word":"生体認証"},{"english":"Single Sign-On (SSO)","explanation":"一度の認証で、複数の異なるシステムやサービスにアクセスできるようにする仕組みです。","word":"シングルサインオン"},{"english":"OAuth","explanation":"ユーザーが自身の情報にアクセスする権限を、別のサービスに安全に付与するためのプロトコルです。パスワードを直接教えることなく、特定のデータ共有を許可します。","word":"OAuth"}]','2025-08-03 08:53:59');
INSERT INTO history VALUES(24,5,4,'サイバー攻撃','[{"english":"Zero-day attack","explanation":"ソフトウェアの脆弱性が公になる前にその脆弱性を悪用するサイバー攻撃。","word":"ゼロデイ攻撃"},{"english":"Advanced Persistent Threat attack","explanation":"国家などが関与することが多く、特定の標的に対して長期間にわたり潜伏し、機密情報を窃取したり破壊活動を行う高度で持続的な脅威。","word":"APT攻撃"},{"english":"Ransomware","explanation":"感染したコンピュータシステムやデータを暗号化するなどしてアクセス不能にし、その復旧と引き換えに金銭（身代金）を要求するマルウェア。","word":"ランサムウェア"},{"english":"Supply chain attack","explanation":"組織が信頼している第三者（供給元など）のシステムやプロセスを侵害し、その信頼関係を利用して本来の標的へと侵入する攻撃手法。","word":"サプライチェーン攻撃"}]','2025-08-03 08:54:03');
INSERT INTO history VALUES(25,5,5,'暗号技術','[{"english":"Homomorphic Encryption","explanation":"暗号化された状態のデータを、復号することなくそのまま演算できる高度な暗号技術です。クラウドでの秘匿計算などに応用されます。","word":"準同型暗号"},{"english":"Zero-Knowledge Proof","explanation":"ある情報を知っていることを、その情報自体を開示することなく、相手に証明できる暗号学的プロトコルです。プライバシー保護と認証に用いられます。","word":"ゼロ知識証明"},{"english":"Post-Quantum Cryptography","explanation":"量子コンピュータの登場によって現在の公開鍵暗号が安全でなくなる可能性に備え、量子コンピュータでも解読が困難とされる新たな数学問題に基づく暗号技術です。","word":"耐量子暗号"},{"english":"Secure Multi-Party Computation","explanation":"複数の参加者が各自の入力値を秘密にしたまま、協力してある計算（関数）の結果を得るための暗号学的プロトコルです。プライバシーを保ちつつデータ分析などを行う際に利用されます。","word":"秘匿マルチパーティ計算"}]','2025-08-03 08:54:08');
INSERT INTO history VALUES(26,6,1,'ソフトウェア開発手法','[{"english":"Agile","explanation":"柔軟で反復的な開発を行う手法。短期間で計画・実装・テストを繰り返します。","word":"アジャイル"},{"english":"Waterfall Model","explanation":"計画からテストまで、工程を順に進めていく伝統的な開発手法。一度進むと前工程に戻りにくい。","word":"ウォーターフォールモデル"},{"english":"Version Control","explanation":"ソフトウェアのソースコードや文書などの変更履歴を記録し、管理するシステム。","word":"バージョン管理"},{"english":"Bug","explanation":"ソフトウェアの誤動作や意図しない挙動を引き起こす欠陥や間違い。","word":"バグ"}]','2025-08-03 08:54:56');
INSERT INTO history VALUES(27,6,2,'ソフトウェアテスト','[{"english":"Test Case","explanation":"テストの実施に必要な具体的な手順と期待される結果を記述したもの","word":"テストケース"},{"english":"Bug","explanation":"ソフトウェアにおける設計上の誤りや欠陥","word":"バグ"},{"english":"Debug","explanation":"ソフトウェアの欠陥（バグ）を発見し、修正する作業","word":"デバッグ"},{"english":"Unit Test","explanation":"プログラムの個々のモジュールや関数が正しく動作するかを確認するテスト","word":"単体テスト"}]','2025-08-03 08:54:58');
INSERT INTO history VALUES(28,6,3,'ソフトウェアテスト','[{"english":"Unit Test","explanation":"プログラムの個々の最小単位が意図した通りに動作するかどうかを確認するテスト。","word":"単体テスト"},{"english":"Integration Test","explanation":"個別にテストされたモジュールやコンポーネントを組み合わせて、それらが正しく連携して動作するかを確認するテスト。","word":"結合テスト"},{"english":"System Test","explanation":"開発されたシステム全体が、要件定義通りに機能するか、非機能要件（性能、セキュリティなど）を満たしているかを確認するテスト。","word":"システムテスト"},{"english":"Acceptance Test","explanation":"開発されたシステムが、顧客や利用者の期待に応えているか、ビジネス要件を満たしているかを確認するための最終段階のテスト。通常、顧客自身が行う。","word":"受け入れテスト"}]','2025-08-03 08:55:04');
INSERT INTO history VALUES(29,6,4,'ソフトウェアアーキテクチャ','[{"english":"Microservices Architecture","explanation":"独立した小さなサービスにシステムを分割し、それぞれが独自のプロセスで動作し、個別にデプロイされるアーキテクチャスタイル。","word":"マイクロサービスアーキテクチャ"},{"english":"Event-Driven Architecture","explanation":"イベントの生成、検出、消費に基づいて疎結合なコンポーネントが通信する設計パラダイム。","word":"イベントドリブンアーキテクチャ"},{"english":"Monolithic Architecture","explanation":"アプリケーションのすべてのコンポーネントが単一のユニットとして構築され、緊密に結合された従来のアーキテクチャスタイル。","word":"モノリシックアーキテクチャ"},{"english":"Service-Oriented Architecture (SOA)","explanation":"ビジネスプロセスをサービスとして表現し、疎結合なコンポーネントがネットワークを通じてサービスを提供し、利用しあうアーキテクチャ。","word":"サービス指向アーキテクチャ (SOA)"}]','2025-08-03 08:55:11');
INSERT INTO history VALUES(30,6,5,'形式手法','[{"english":"Z Notation","explanation":"形式仕様記述言語の一つで、集合論と述語論理に基づきシステムの振る舞いを厳密に記述します。","word":"Z記法"},{"english":"Model Checking","explanation":"有限状態システムの網羅的な状態探索によって、システムが特定の性質（安全特性や活性特性など）を満たしているかを自動的に検証する手法です。","word":"モデル検査"},{"english":"Theorem Proving","explanation":"論理システム内の公理や推論規則に基づいて、命題や性質が真であることを数学的に厳密に証明する手法です。","word":"定理証明"},{"english":"Event-B","explanation":"アブストラクション（抽象化）とリファインメント（具象化）を重視した形式開発手法で、安全性が重視されるシステム（特に高信頼性システム）の設計と実装に応用されます。","word":"Event-B"}]','2025-08-03 08:55:15');
INSERT INTO history VALUES(31,7,1,'UXデザイン','[{"english":"User Experience","explanation":"製品やサービスを通してユーザーが得る一連の体験を指します。使いやすさだけでなく、感動や楽しさも含まれます。","word":"ユーザーエクスペリエンス"},{"english":"Usability","explanation":"特定のユーザーが特定の目的を達成するために、ある製品がどれだけ効果的に、効率的に、そして満足のいくものとして使えるかを示す度合いです。","word":"ユーザビリティ"},{"english":"User Interface","explanation":"ユーザーとシステムが対話するための接点（画面、ボタン、音声など）を指します。デザインの見た目や操作性に関わります。","word":"ユーザーインターフェース"},{"english":"Persona","explanation":"架空のユーザー像。ターゲットユーザーの行動パターン、目的、課題などを具体的に示すために作成され、デザインの方向性を定めるのに役立ちます。","word":"ペルソナ"}]','2025-08-03 08:55:45');
INSERT INTO history VALUES(32,7,2,'アクセシビリティ','[{"english":"Screen Reader","explanation":"視覚障害者がコンピューター画面の内容を音声で聞くためのソフトウェアです。","word":"スクリーンリーダー"},{"english":"Universal Design","explanation":"年齢、能力、状況に関わらず、すべての人が利用できるような製品や環境を設計する考え方です。","word":"ユニバーサルデザイン"},{"english":"Braille","explanation":"視覚障害者が指で触って読むことができるように考案された文字体系です。","word":"点字"},{"english":"Sign Language","explanation":"聴覚障害者や発話に困難がある人が、手や体の動きを使ってコミュニケーションをとるための言語です。","word":"手話"}]','2025-08-03 08:55:49');
INSERT INTO history VALUES(33,7,3,'ユーザビリティ','[{"english":"User Experience (UX)","explanation":"製品やサービスを利用する際にユーザーが経験する、感情や態度、知覚など全ての側面を指します。","word":"ユーザーエクスペリエンス"},{"english":"Information Architecture (IA)","explanation":"ウェブサイトやアプリケーション内の情報を、ユーザーが探しやすく理解しやすいように整理・構造化する設計分野です。","word":"情報アーキテクチャ"},{"english":"Heuristic Evaluation","explanation":"ユーザビリティの専門家が、事前に定められた一連の原則（ヒューリスティックス）に基づいてシステムのユーザビリティ上の問題を特定する評価手法です。","word":"ヒューリスティック評価"},{"english":"Affordance","explanation":"特定のオブジェクトやインターフェースの特性が、その使用方法を直感的に示唆する性質を指します。","word":"アフォーダンス"}]','2025-08-03 08:55:54');
INSERT INTO history VALUES(34,7,4,'UI/UXデザイン','[{"english":"Affordance","explanation":"オブジェクトや環境が持つ、特定の操作をユーザーに「示唆する」性質。例えば、ボタンは押せることを示唆する。","word":"アフォーダンス"},{"english":"Heuristic Evaluation","explanation":"ヤコブ・ニールセンなどが提唱したユーザビリティに関する経験則（ヒューリスティック）に基づいて、ユーザーインターフェースの問題点を発見する評価手法。","word":"ヒューリスティック評価"},{"english":"Information Architecture (IA)","explanation":"情報を整理し、構造化し、ユーザーが目的のコンテンツを見つけやすいように設計する専門分野。ウェブサイトやアプリのナビゲーション設計などに不可欠。","word":"情報アーキテクチャ"},{"english":"Cognitive Load","explanation":"ユーザーが特定のタスクを遂行する際に、脳にかかる精神的労力の量。UXデザインでは、ユーザーの認知負荷を最小限に抑えることが重要視される。","word":"認知負荷"}]','2025-08-03 08:56:01');
INSERT INTO history VALUES(35,7,5,'インタラクションデザイン','[{"english":"Hick''s Law","explanation":"ユーザーが多くの選択肢を持つ場合、意思決定にかかる時間が選択肢の数に対して対数的に増加するという法則。シンプルかつ効率的なインタラクション設計の重要性を示します。","word":"ヒックの法則"},{"english":"Affordance and Signifier","explanation":"アフォーダンスとは、あるオブジェクトが提供する操作の可能性。シグニファイアは、そのアフォーダンスを示唆するための手がかりや記号。良いインタラクションデザインには、両者の明確な提示が不可欠です。","word":"アフォーダンスとシグニファイア"},{"english":"Mental Model","explanation":"ユーザーがシステムやデバイスについて持つ、その動作原理や構造に関する推論モデル。デザイナーはユーザーのメンタルモデルを理解し、それに沿った設計をすることで、直感的で使いやすい製品を提供できます。","word":"メンタルモデル"},{"english":"Gulf of Execution and Gulf of Evaluation","explanation":"実行の溝とは、ユーザーの意図とシステムが提供するアクションの隔たり。評価の溝とは、システムの状態がユーザーの期待とどのように一致するかを理解する難しさ。これらを埋めることが、優れたユーザーエクスペリエンスの鍵です。","word":"実行の溝と評価の溝"}]','2025-08-03 08:56:09');
INSERT INTO history VALUES(36,8,1,'組み込みソフトウェア','[{"english":"CPU","explanation":"コンピュータの「頭脳」にあたる部分で、命令を実行し、計算を行う電子回路です。組み込みシステムでは、特定のタスクに特化したCPUが使われることが多いです。","word":"中央演算処理装置 (CPU)"},{"english":"Firmware","explanation":"ハードウェアに直接書き込まれ、その機器を制御するためのソフトウェアです。パソコンのBIOSや家電製品の内部プログラムなどがこれにあたります。","word":"ファームウェア"},{"english":"RTOS (Real-time Operating System)","explanation":"特定の処理を「決まった時間内」に確実に実行することを目的としたオペレーティングシステムです。自動車のエンジン制御や産業用ロボットなどで使われます。","word":"リアルタイムOS"},{"english":"Cross-compilation","explanation":"ソフトウェアを開発するコンピュータとは別の種類のコンピュータ（ターゲット機器）で実行できる形式に変換することです。組み込み開発では、PCで書いたプログラムを組み込み機器向けにコンパイルする際に用いられます。","word":"クロスコンパイル"}]','2025-08-03 08:56:34');
INSERT INTO history VALUES(37,8,2,'基本的なハードウェアコンポーネント','[{"english":"CPU","explanation":"コンピュータの主要な演算・制御を行う部品です。組み込みシステムでもプログラムの実行を担当します。","word":"中央処理装置"},{"english":"Memory","explanation":"プログラムやデータを一時的、あるいは永続的に保存する部品です。RAMやROMなどがあります。","word":"メモリ"},{"english":"Microcontroller","explanation":"CPU、メモリ、入出力インターフェースなどを一つのLSIにまとめた、組み込みシステムの中核となる集積回路です。","word":"マイクロコントローラ"},{"english":"Input/Output Port","explanation":"外部のセンサーやアクチュエータなどとデータをやり取りするための、信号の出入り口となる回路です。","word":"入出力ポート"}]','2025-08-03 08:56:38');
INSERT INTO history VALUES(38,8,3,'リアルタイムOS','[{"english":"Task","explanation":"リアルタイムOSにおける実行単位です。複数のタスクが協調して動作します。","word":"タスク"},{"english":"Scheduler","explanation":"タスクの実行順序を決定し、CPUを割り当てるリアルタイムOSの機能です。","word":"スケジューラ"},{"english":"Mutex","explanation":"複数のタスクが共有リソースに同時にアクセスするのを防ぐための同期メカニズムです。","word":"ミューテックス"},{"english":"Interrupt","explanation":"CPUの通常の処理を一時的に中断し、特定のイベント（例：ハードウェアの応答）を処理するための信号です。","word":"割込み"}]','2025-08-03 08:56:41');
INSERT INTO history VALUES(39,8,4,'リアルタイムOS','[{"english":"Real-time Operating System (RTOS)","explanation":"決定的な時間制約を持つタスクの実行を保証するために設計されたオペレーティングシステム。","word":"リアルタイムOS"},{"english":"μC/OS-III","explanation":"組込みシステム向けの人気の高い、ポータブルでスケーラブルなリアルタイムカーネル。商用利用可能。","word":"μC/OS-III"},{"english":"Deadline Scheduling","explanation":"各タスクに実行完了の締め切り時間を割り当て、その締め切りまでにタスクが完了するようにスケジューリングを行う方式。","word":"デッドラインスケジューリング"},{"english":"Preemption","explanation":"実行中のタスクの処理を中断し、より優先度の高い別のタスクにCPUの制御を移すOSの機能。","word":"プリエンプション"}]','2025-08-03 08:56:47');
INSERT INTO history VALUES(40,8,5,'リアルタイムOS','[{"english":"Context Switching","explanation":"CPUが実行するタスクを切り替えるプロセス。リアルタイムOSでは、この切り替えにかかる時間（オーバーヘッド）がシステムの応答性に直結する。","word":"コンテキストスイッチ"},{"english":"Jitter","explanation":"繰り返し発生するイベントの実行時間や応答時間の変動。リアルタイムシステムにおいて、予測可能性を確保するためにはジッタを最小限に抑えることが極めて重要。","word":"ジッタ"},{"english":"Priority Inversion","explanation":"優先度の低いタスクが共有リソースをロックしているために、優先度の高いタスクがそのリソースを待機せざるを得なくなり、実質的に優先度が逆転してしまう現象。","word":"優先度逆転"},{"english":"Watchdog Timer","explanation":"システムのフリーズや暴走を検出するために使用されるハードウェアまたはソフトウェアタイマー。定期的にリセットされない場合、システムを強制的にリセットまたは再起動させる。","word":"ウォッチドッグタイマ"}]','2025-08-03 08:56:52');
INSERT INTO history VALUES(41,9,1,'機械学習','[{"english":"Machine Learning","explanation":"コンピュータにデータからパターンを学習させ、予測や判断を可能にする技術。","word":"機械学習"},{"english":"Dataset","explanation":"機械学習モデルの訓練や評価に使用されるデータの集まり。","word":"データセット"},{"english":"Model","explanation":"データから学習したパターンや規則を表す数式やアルゴリズムのこと。","word":"モデル"},{"english":"Training","explanation":"データを使って機械学習モデルが学習するプロセス。","word":"訓練"}]','2025-08-03 08:57:12');
INSERT INTO history VALUES(42,9,2,'機械学習','[{"english":"Dataset","explanation":"機械学習モデルの訓練や評価に使用されるデータの集まり。","word":"データセット"},{"english":"Feature","explanation":"データの中からモデルの学習に役立つ特性や属性。","word":"特徴量"},{"english":"Model","explanation":"データからパターンを学習し、予測や分類を行うための数理的な枠組み。","word":"モデル"},{"english":"Training","explanation":"データを用いてモデルが学習し、最適な状態になるように調整するプロセス。","word":"訓練"}]','2025-08-03 08:57:15');
INSERT INTO history VALUES(43,9,3,'機械学習','[{"english":"Overfitting","explanation":"モデルが訓練データに過度に適応しすぎてしまい、未知のデータに対する予測性能が低下する現象です。","word":"過学習"},{"english":"Cross-validation","explanation":"データを複数のサブセットに分割し、一部を訓練用、残りを検証用として用いることで、モデルの汎化性能を評価する手法です。","word":"交差検定"},{"english":"Feature Engineering","explanation":"機械学習モデルの性能を向上させるために、生のデータから特徴量を作成・変換するプロセスです。","word":"特徴量エンジニアリング"},{"english":"Gradient Descent","explanation":"モデルの誤差を最小化するために、勾配を利用してパラメータを段階的に更新していく最適化アルゴリズムです。","word":"勾配降下法"}]','2025-08-03 08:57:17');
INSERT INTO history VALUES(44,9,4,'機械学習','[{"english":"Ensemble Learning","explanation":"複数の異なる学習器の予測を組み合わせることで、単一の学習器よりも優れた汎化性能を持つモデルを構築する機械学習の手法。","word":"アンサンブル学習"},{"english":"Generative Adversarial Networks","explanation":"生成器と識別器という2つのニューラルネットワークが互いに競い合うことで、本物のような新しいデータを生成する深層学習のモデル。","word":"敵対的生成ネットワーク"},{"english":"Reinforcement Learning","explanation":"エージェントが環境と相互作用しながら試行錯誤を通じて、報酬を最大化するような行動戦略を自律的に学習する機械学習の一分野。","word":"強化学習"},{"english":"Transfer Learning","explanation":"あるタスクで学習済みのモデルやその一部を、別の関連するタスクの学習に再利用することで、少ないデータや短い時間で高い性能を達成する深層学習の手法。","word":"転移学習"}]','2025-08-03 08:57:22');
INSERT INTO history VALUES(45,9,5,'機械学習','[{"english":"Transformer","explanation":"セルフアテンションメカニズムを基盤とし、並列計算を可能にすることで、特に自然言語処理分野においてシーケンスデータ処理の性能を飛躍的に向上させた深層学習モデル。大規模言語モデルの基礎となっている。","word":"トランスフォーマー"},{"english":"Generative Adversarial Networks (GANs)","explanation":"生成器と識別器の2つのニューラルネットワークが敵対的に学習することで、リアルな画像やデータを生成する深層学習モデル。高品質な合成データ生成に応用される。","word":"敵対的生成ネットワーク"},{"english":"Reinforcement Learning from Human Feedback (RLHF)","explanation":"大規模言語モデルなどの生成モデルの振る舞いを、人間の選好データ（評価）を用いて強化学習により最適化する手法。安全性、有用性、整合性の向上に貢献する。","word":"人間からのフィードバックによる強化学習"},{"english":"Causal Inference","explanation":"単なる相関関係ではなく、ある事象が別の事象に与える「原因と結果」の関係を統計的、数学的に特定・定量化する学問分野。A/Bテストや構造方程式モデリングなどが用いられる。","word":"因果推論"}]','2025-08-03 08:57:28');
INSERT INTO history VALUES(46,10,1,'オペレーティングシステム','[{"english":"OS","explanation":"コンピュータの基本的な動作を管理するソフトウェアで、WindowsやmacOSなどが該当します。","word":"オペレーティングシステム"},{"english":"CPU","explanation":"コンピュータの頭脳にあたり、計算やデータ処理の実行を担当する主要な部品です。","word":"中央処理装置"},{"english":"Memory","explanation":"コンピュータが一時的にデータを保存しておく場所で、処理速度に大きく影響します。","word":"メモリ"},{"english":"File","explanation":"コンピュータ上でデータやプログラムがひとまとまりになったもので、文書や画像、動画などがあります。","word":"ファイル"}]','2025-08-03 08:57:43');
INSERT INTO history VALUES(47,10,2,'オペレーティングシステム','[{"english":"Operating System","explanation":"コンピュータを動かすための基本的なソフトウェアで、ハードウェアの管理や他のソフトウェアの実行を制御します。","word":"OS"},{"english":"File","explanation":"コンピュータ上に保存される、一連のデータをまとめたものです。文書、画像、プログラムなど様々な種類があります。","word":"ファイル"},{"english":"Process","explanation":"コンピュータで実行されているプログラムのインスタンスのことです。メモリやCPU時間などを使って動作します。","word":"プロセス"},{"english":"Memory","explanation":"コンピュータがデータを一時的に保存するために使用する場所です。プログラムが実行中にデータや命令を読み書きします。","word":"メモリ"}]','2025-08-03 08:57:46');
INSERT INTO history VALUES(48,10,3,'ネットワーク','[{"english":"IP Address","explanation":"インターネットに接続されたデバイスを識別するための数値アドレス。","word":"IPアドレス"},{"english":"Router","explanation":"異なるネットワーク間でデータパケットを転送するデバイス。","word":"ルーター"},{"english":"Firewall","explanation":"不正アクセスからネットワークやシステムを保護するためのセキュリティシステム。","word":"ファイアウォール"},{"english":"Cloud Computing","explanation":"インターネットを通じて、サーバーやストレージ、ソフトウェアなどのコンピューターリソースを利用するサービス。","word":"クラウドコンピューティング"}]','2025-08-03 08:57:48');
INSERT INTO history VALUES(49,10,4,'AI/機械学習','[{"english":"Convolutional Neural Network","explanation":"画像認識などに特化した、複数の層を持つ深層学習モデル。","word":"畳み込みニューラルネットワーク"},{"english":"Recurrent Neural Network","explanation":"時系列データや連続するテキストの処理に用いられるニューラルネットワークの一種。","word":"回帰型ニューラルネットワーク"},{"english":"Generative Adversarial Network","explanation":"互いに対立する二つのネットワークが学習し合うことで、リアルなデータを生成するモデル。","word":"敵対的生成ネットワーク"},{"english":"Reinforcement Learning","explanation":"エージェントが環境との相互作用を通じて、報酬を最大化するように行動を学習する機械学習の一分野。","word":"強化学習"}]','2025-08-03 08:57:51');
INSERT INTO history VALUES(50,10,5,'量子コンピュータ','[{"english":"Coherence Time","explanation":"量子重ね合わせ状態が外部ノイズの影響を受けずに安定して保たれる時間のこと。この時間が長いほど、複雑な量子計算が可能となる。","word":"コヒーレンス時間"},{"english":"Quantum Error Correction","explanation":"量子コンピュータにおける計算中に発生する量子ビットのデコヒーレンスやノイズによる誤りを検出し、訂正するための技術。フォルトトレラント量子計算に不可欠。","word":"量子誤り訂正"},{"english":"Shor''s Algorithm","explanation":"素因数分解を高速に行う量子アルゴリズム。現代の公開鍵暗号の多くは素因数分解の困難性に基づいているため、これが実現されると大きな脅威となる。","word":"シュアーのアルゴリズム"},{"english":"Topological Quantum Computer","explanation":"トポロジー的な保護を利用してデコヒーレンスから量子情報を守ろうとする量子コンピュータの方式。より誤りに強いと期待されているが、実現は極めて困難。","word":"トポロジカル量子コンピュータ"}]','2025-08-03 08:58:01');
-- CREATE TABLE _cf_METADATA (
--         key INTEGER PRIMARY KEY,
--         value BLOB
--       );
-- INSERT INTO _cf_METADATA VALUES(2,151);
-- DELETE FROM sqlite_sequence;
-- INSERT INTO sqlite_sequence VALUES('categories',10);
-- INSERT INTO sqlite_sequence VALUES('difficulties',5);
-- INSERT INTO sqlite_sequence VALUES('history',50);
-- COMMIT;
